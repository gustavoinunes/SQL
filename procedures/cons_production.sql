CREATE OR REPLACE PROCEDURE OTIMIZA.SH_CONS_ROT_OPER_PR (
V_ACAO varchar2 := 'PLI',
V_SESSAO integer,
V_USUARIO varchar2,
V_EMPRESA integer,
V_ITEMPR integer,
V_ROTEIRO integer,
V_DT_LOG timestamp := current_timestamp
) IS
V_ITEM integer;
V_VALID integer;
BEGIN
	IF V_ACAO = 'PLI' THEN
		DELETE FROM otimiza.SH_CONS_ROT_OPER WHERE SESSAO = V_SESSAO OR V_SESSAO IN (SELECT SESSAO FROM OTM_LOG_ACESSOS WHERE ACESSO_FIM IS NOT NULL);
		SELECT TITENS.ID INTO V_ITEM FROM TITENS JOIN TITENS_EMPR ON TITENS_EMPR.ITEM_ID = TITENS.ID WHERE TITENS_EMPR.ID = V_ITEMPR;
		FOR K IN (
					WITH
					VALORES_VALIDOS AS (
					  SELECT * FROM TCAD_EST_ITE 
					  WHERE TP_ESTRUTURA <> 'I' AND EMPR_ID = V_EMPRESA
					  AND NOT EXISTS (SELECT ID FROM TCAD_EST_ITE_CONF WHERE TCAD_EST_ITE_CONF.TCAD_EST_IT_ID = TCAD_EST_ITE.ID)
					),
					ARVORE AS (
					  SELECT
					    ID,
					    PAI_ID,
					    SEQ_ORD,
					    FILHO_ID,
					    TP_ESTRUTURA,
					    LEVEL AS NIVEL,
					    CONNECT_BY_ISLEAF AS IS_FOLHA,
					    SYS_CONNECT_BY_PATH(LEVEL || '.' || SEQ_ORD, ' - ') AS CAMINHO
					  FROM VALORES_VALIDOS
					  START WITH PAI_ID = V_ITEM
					  CONNECT BY PRIOR FILHO_ID = PAI_ID
					    AND (CASE
						    	WHEN LEVEL = 1 THEN 1
						    	WHEN PRIOR TP_ESTRUTURA <> 'N' THEN 1
					            ELSE 0
					         END = 1)
					    AND NOT EXISTS (SELECT 1 FROM TROTEIRO JOIN TITENS_EMPR ON TITENS_EMPR.ID = TROTEIRO.ITEMPR_ID WHERE TITENS_EMPR.ITEM_ID = VALORES_VALIDOS.PAI_ID AND TP_ESTRUTURA = 'N')
					  ORDER BY CAMINHO
					)
					SELECT DISTINCT
					  X.ID_CONSUMO,
					  X.ID_ROTEIRO,
					  X.ID_ITEMPR,
					  X.SEQ_ORD,
					  NVL(X.PERC_CONSUMO,0) PERC_CONSUMO,
					  NVL(X.PERC_ACUMULADO,0) PERC_ACUMULADO
					FROM (
						  SELECT
						    TCONSUMOS.ID ID_CONSUMO,
						    TROTEIRO.ID ID_ROTEIRO,
						    TITENS_EMPR.ID AS ID_ITEMPR,
						    ARVORE.SEQ_ORD,
						    ARVORE.NIVEL,
						    ARVORE.CAMINHO,
						    TCONSUMOS.PER_CONSUMO PERC_CONSUMO,
						    (SELECT SUM(PER_CONSUMO) FROM TCONSUMOS LEFT JOIN TROTEIRO ON TROTEIRO.ITEMPR_ID = PAI_ROT_2.ID WHERE TCONSUMOS.ITEMPR_ID = TITENS_EMPR.ID AND TCONSUMOS.SEQ_ORD = ARVORE.SEQ_ORD AND TCONSUMOS.TROTEIRO_ID = TROTEIRO.ID) PERC_ACUMULADO
						  FROM ARVORE
						  JOIN TITENS FILHO ON FILHO.ID = ARVORE.FILHO_ID
						  JOIN TITENS_EMPR ON TITENS_EMPR.ITEM_ID = FILHO.ID
						  JOIN TITENS PAI_ROT ON PAI_ROT.ID = ARVORE.PAI_ID
						  JOIN TITENS_EMPR PAI_ROT_2 ON PAI_ROT_2.ITEM_ID = V_ITEM
						  LEFT JOIN TROTEIRO ON TROTEIRO.ITEMPR_ID = PAI_ROT_2.ID AND TROTEIRO.ID = V_ROTEIRO
						  LEFT JOIN TCONSUMOS ON TCONSUMOS.ITEMPR_ID = TITENS_EMPR.ID AND TCONSUMOS.SEQ_ORD = ARVORE.SEQ_ORD AND TCONSUMOS.TROTEIRO_ID = TROTEIRO.ID
						  WHERE ARVORE.TP_ESTRUTURA NOT IN ('F','I') AND TITENS_EMPR.SIT = 1
						  ORDER BY CAMINHO
						) X
					ORDER BY X.SEQ_ORD
				) LOOP
			SELECT MAX(ID) INTO V_VALID FROM SH_CONS_ROT_OPER WHERE SESSAO = V_SESSAO AND USUARIO = V_USUARIO AND ID_CONSUMO = K.ID_CONSUMO AND ID_ROTEIRO = K.ID_ROTEIRO AND ID_ITEMPR = K.ID_ITEMPR AND SEQ_ORD = K.SEQ_ORD;
			IF V_VALID IS NULL THEN
				INSERT INTO otimiza.SH_CONS_ROT_OPER (ID,SESSAO,USUARIO,DT_LOG,ID_CONSUMO,ID_ROTEIRO,ID_ITEMPR,SEQ_ORD,PERC_CONSUMO,PERC_ACUMULADO)
				VALUES (SH_CONS_ROT_OPER_ID.NEXTVAL,V_SESSAO,V_USUARIO,V_DT_LOG,K.ID_CONSUMO,K.ID_ROTEIRO,K.ID_ITEMPR,K.SEQ_ORD,K.PERC_CONSUMO,K.PERC_ACUMULADO);
			END IF;
		END LOOP;	
	ELSIF V_ACAO = 'PLF' THEN
		FOR K IN (SELECT * FROM SH_CONS_ROT_OPER WHERE SESSAO = V_SESSAO AND ID_CONSUMO IS NOT NULL) LOOP
			IF K.PERC_CONSUMO = 0 
				THEN DELETE FROM focco3i.TCONSUMOS WHERE TCONSUMOS.ID = K.ID_CONSUMO;
				ELSE UPDATE focco3i.TCONSUMOS SET TCONSUMOS.PER_CONSUMO = K.PERC_CONSUMO WHERE TCONSUMOS.ID = K.ID_CONSUMO;
			END IF;
		END LOOP;
		FOR K IN (SELECT * FROM SH_CONS_ROT_OPER WHERE SESSAO = V_SESSAO AND ID_CONSUMO IS NULL AND PERC_CONSUMO <> 0) LOOP
			INSERT INTO focco3i.TCONSUMOS (ID,ITEMPR_ID,PER_CONSUMO,SEQ_ORD,TROTEIRO_ID,IND_REM_RET)
			VALUES (SEQ_ID_TCONSUMOS.NEXTVAL,K.ID_ITEMPR,K.PERC_CONSUMO,K.SEQ_ORD,K.ID_ROTEIRO,0);
		END LOOP;
	END IF;
	COMMIT;
END;
